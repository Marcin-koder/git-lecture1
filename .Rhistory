geom_line(aes(y = minimum_rate, color = "Minimum loss")) +
geom_line(aes(y = interest_rate, color = "Output gap")) +
labs(x = "Time", y = "Economic values", title = "Dynamic response to supply shock",
color = "Legend") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors5)
#Alternative 2. Plotting optimum output gap curve with output gap curve from task 3.
# Create a new function to calculate optimal interest rate as presented
# in task 4.
optimum_rate <- function(rbar, a, b, nu, lambda, pi_lag, pibar, o){
optimum_r = rbar + a/b + (nu*(pi_lag - pibar +  o)/(b*(lambda + nu^2)))
return(optimum_r)
}
# Create a new function to calculate output gap as presented in task 4.
optimum_gdp <- function(nu, b, lambda, pibar, pi_lag, o){
opt_gdp = (nu/b*(lambda+nu^2))*(pibar - pi_lag - o)
return(opt_gdp)
}
df_optimum_rate2 <- tibble(number_of_periods = number_of_periods,
yt1 = df_simulation$gdp_gap,
yt2 = 0)
for( i in 1:nrow(df_optimum_rate2)){
df_optimum_rate2$yt2[i] <- optimum_gdp(nu = .8, b = .5, lambda = 1,
pi_lag = df_simulation$inflation[i], pibar = 0.02,
o = .1)
}
colors6 <- c("Output gap" = "red", "Optimal output gap" = "blue")
df_optimum_rate2 %>% ggplot(aes(x = number_of_periods)) +
geom_line(aes(y = yt1, color = "Output gap")) +
geom_line(aes(y = yt2, color = "Optimal output gap")) +
labs(x = "Time", y = "Economic values", title = "Dynamic response to supply shock",
color = "Legend") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors6)
# Alternative 3. Plotting demand and supply curves from task 2, with and without shock values,
# together with optimal output gap curve
df_optimum_rate4 <-
tibble(number_of_periods = number_of_periods,
demand = 0,
demand2 = 0,
demand3 = 0,
supply = 0)
for (i in 2:nrow(df_optimum_rate4)){
df_optimum_rate4$demand[i] <- y_demand(pi = df_simulation$inflation[i], a = 0, b = 1.25, rbar = .02, m = 1,pibar = .02)
df_optimum_rate4$demand2[i] <-y_demand(pi = df_simulation$inflation[i], a = .01, b = 1.25, rbar = .02, m = 2,pibar = .02)
df_optimum_rate4$demand3[i]<- optimum_gdp(nu = .8, b = .5, lambda = 1,
pi_lag = df_simulation$inflation[i-1], pibar = 0.02,
o = .1)
df_optimum_rate4$supply[i] <- y_supply(pi = df_simulation$inflation[i],pi_lag = df_simulation$inflation[i-1], nu = .8, o = 0)
}
colors7 <- c("Demand curve" = "black", "Demand with shock" = "blue",
"Optimal output" = "red", "Supply curve" = "green")
df_optimum_rate4 %>% ggplot(aes(x = number_of_periods)) +
geom_line(aes(y = demand, color = "Demand curve")) +
geom_line(aes(y = demand2, color = "Demand with shock")) +
geom_line(aes(y = demand3, color = "Optimal output")) +
geom_line(aes(y = supply, color = "Supply curve")) +
labs(x = "Time", y = "Economic values", title = "Dynamic response to supply shock",
color = "Legend") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors7)
#Alternative 4. Plot Demand curves from task 2 together with a demand curve defined
# by function from equation 2 in task 2 but with interest rate defined by equation 5
# from task 4.
# Create a function to calculate output gap where intereest rate is defined by
# equation 5 from task 4.
y_demand_opt<- function(a, b, rbar, nu, lambda, pi_lag, pibar, o){
steady_gdp1 = a - b*((rbar + a/b + (nu*(pi_lag - pibar +  o)/(b*(lambda + nu^2)))-rbar))
return(steady_gdp1)
}
# Create tibble with values responding to demand and supply functions with central
# bank intervention using monetary policy(demand 2) and optimal interest rate (demand3).
df_optimum_rate5 <-
tibble(number_of_periods = number_of_periods,
demand = 0,
demand2 = 0,
demand3 = 0,
supply = 0)
for (i in 2:nrow(df_optimum_rate4)){
df_optimum_rate4$demand[i] <- y_demand(pi = df_simulation$inflation[i], a = 0, b = 1.25, rbar = .02, m = 1,pibar = .02)
df_optimum_rate4$demand2[i] <-y_demand(pi = df_simulation$inflation[i], a = .01, b = 1.25, rbar = .02, m = 2,pibar = .02)
df_optimum_rate4$demand3[i]<- y_demand_opt(a = 0,b = .5,rbar = 0.04,nu = .8,
lambda = 1,
pi_lag = df_simulation$inflation[i-1],
pibar = .02,o = .01)
df_optimum_rate4$supply[i] <- y_supply(pi = df_simulation$inflation[i],
pi_lag = df_simulation$inflation[i-1],
nu = .8, o = 0)
}
colors8 <- c("Demand curve" = "black", "AD with monetary policy" = "blue",
"AD with optimal interest rate" = "red", "Supply curve" = "green")
df_optimum_rate4 %>% ggplot(aes(x = number_of_periods)) +
geom_line(aes(y = demand, color = "Demand curve")) +
geom_line(aes(y = demand2, color = "AD with monetary policy")) +
geom_line(aes(y = demand3, color = "AD with optimal interest rate")) +
geom_line(aes(y = supply, color = "Supply curve")) +
labs(x = "Time", y = "Economic values", title = "Dynamic response to supply shock",
color = "Legend") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors8)
sessionInfo()
df_minimise$minimum_loss[i] <- loss_function(pi = df_simulation$inflation[i],
pibar = 0.2,
lambda = 1,
gdp_gap = df_simulation$gdp_gap[i])
df_minimise %>% ggplot(aes(x = number_of_periods)) +
geom_line(aes(y = minimum_loss, color = "Minimum loss")) +
geom_line(aes(y = interest_rate, color = "Output gap")) +
labs(x = "Time", y = "Economic values", title = "Dynamic response to supply shock",
color = "Legend") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = colors5)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10),
)
mean(df$a)
mean(df$a)
mean(df$b)
mean(df$c)
mean(df$d)
mean(df$e)
for( i in 1:ncol(df)){
print(mean(df[,i]))
}
for( i in 1:ncol(df)){
print(
mean(
df[[i]]
)
)
}
for( i in 1:ncol(df)){
print(
mean(
df[[i]]
)
)
}
for( i in 1:ncol(df)){
print(
mean(
df[[i]]
)
)
}
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
mean (
df[[i]]
}
for( i in seq_along(df)){
out[i]<-
mean (
df[[i]]
)
}
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
mean (
df[[i]]
)
}
print("out")
print(out)
for( i in seq_along(df)){
out[i]<-
mean (
df[[i]]
)
}out }
column_means <-
function(df){
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
mean (
df[[i]]
)
}out
column_means <-
function(df){
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
mean (
df[[i]]
)
}
}
column_means
column_means <-
function(df,fun){
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
fun(
df[[i]]
)
}
}
column_summary<-
function(df,fun){
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
fun(
df[[i]]
)
}
}
column_summary(df, mean)
column_summary<-
function(df,fun){
out <- vector("double", length(df))
for( i in seq_along(df)){
out[i]<-
fun(
df[[i]]
)
}
out
}
column_summary(df, mean)
column_summary(df, sd)
map_dbl(df,mean)
map_dbl(df,mean, trim = .1)
map_dbl(df,~mean(.)/sd(.))
mtcars
mtcars %>%
split(.$cyl)
mtcars %>%
split(.$cyl) %>%
map(~lm(mpg~wt, data = .))
mtcars %>%
split(.$cyl) %>%
map(~lm(mpg~wt, data = .)) %>%
map(summary)
mtcars %>%
split(.$cyl) %>%
map(~lm(mpg~wt, data = .)) %>%
map(summary) %>%
map(~.$r.squared)
mu <- list(-1000, 0, 10000)
sd <- list(1, 5, 10)
?map2
map2(mu, sd, rnorm, n = 5)
n <-  list(1, 100, 25)
list(
mean = mu,
sd = sd,
n = n
) %>%
pmap(rnorm)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# Note that the list only has one entry..
length(stations)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
install.packages("DescTools")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
install.packages("anytime")
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
# We now have the a long list in memory - 11mb! - with just
# a little information on each station. We can note that this
# is a list, not a dataframe. For our purposes, it would be better if
# the list was instead a data frame, with one row pr. sensor station.
# Note that the list only has one entry..
length(stations)
# Note that the list only has one entry..
length(stations[[1]])
View(stations)
stations[[1]][[1]]
as_tibble(stations[[1]][[1]])
stations[[1]] %>%
map(as_tibble)
stations[[1]] %>%
map_dfr(as_tibble)
t <-
t <-
stations[[1]] %>%
map_dfr(as_tibble)
t[1.]
t[i.]$latestData$volumeeByDay
t[1.]$latestData$volumeeByDay
t[1.]$latestData
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
latestData =
map_chr(latestData, 1., default = NA_character_)
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., default = NA_character_)
)
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_)
)
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_)
)
t
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_),
latestData =
as_datetime(latestData, tz = "Europe/Berlin")
)
t
t[1.]$location
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_),
latestData =
as_datetime(latestData, tz = "Europe/Berlin")
)
source("~/.active-rstudio-document", echo=TRUE)
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_),
latestData =
as_datetime(latestData, tz = "Europe/Berlin")
) %>%
mutate(
lat = map_dbl(
location,
~.$coordinates$latLon$lat
)
)
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_),
latestData =
as_datetime(latestData, tz = "Europe/Berlin")
) %>%
mutate(
lat = map_dbl(
location,
~.$$latLon$lat
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_),
latestData =
as_datetime(latestData, tz = "Europe/Berlin")
) %>%
mutate(
lat = map_dbl(
location,
~.$latLon$lat
)
)
t
t <-
stations[[1]] %>%
map_dfr(as_tibble) %>%
mutate(
latestData =
map_chr(latestData, 1., .default = NA_character_),
latestData =
as_datetime(latestData, tz = "Europe/Berlin")
) %>%
mutate(
lat = map_dbl(
location,
~.$latLon$lat
),
lon = map_dbl(location, ~.$latLon$lon)
)
t
setwd("~/git-lecture1")
setw("~/git")
setwd("~/git")
setwd("~/Desktop/git/git-lecture1")
